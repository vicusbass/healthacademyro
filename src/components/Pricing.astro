---
import { marked } from 'marked';
import { planGroups as rawPlanGroups } from '../data/pricingPlans.js';

// Define interfaces for the data structure
interface PricingItem {
  text: string;
  note?: string;
}

interface Section {
  title: string;
  items: PricingItem[];
  sectionModalDetails?: {
    title: string;
    content: string;
  };
}

interface Plan {
  name: string;
  sections: Section[];
}

interface PlanGroup {
  title: string;
  plans: Plan[];
}

const planGroups: PlanGroup[] = rawPlanGroups as PlanGroup[];
let planCounter = 0;

const getGridSettings = (groupTitle: string) => {
  if (groupTitle === "ABONAMENTE PREGATIRE") {
    return { gridClass: "md:grid-cols-5", breakSpanClass: "md:col-span-5" };
  }
  if (groupTitle === "ABONAMENTE ACCESS CLUB") {
    return { gridClass: "md:grid-cols-3", breakSpanClass: "md:col-span-3" };
  }
  return { gridClass: "md:grid-cols-4", breakSpanClass: "md:col-span-4" }; // Default
};
---

<section id="pricing" class="section bg-gray-50 dark:bg-gray-800/50">
  <div class="container-custom">
    {planGroups.map((group: PlanGroup) => {
      const { gridClass, breakSpanClass } = getGridSettings(group.title);
      return (
        <div class="w-full mb-10"> {/* Wrapper for each group including its title */}
          <h2 class="text-3xl font-bold my-10 text-center uppercase tracking-wider text-gray-800 dark:text-gray-200">{group.title}</h2>
          {/* Add data-group-title to the grid container */}
          <div class={`grid ${gridClass} gap-1`} data-group-title={group.title}> 
            {group.plans.map((plan: Plan) => {
              const currentPlanIndex = planCounter++;
              return (
                <>
                  {/* Apply row break only if it's the specific plan in the specific group */}
                  {plan.name === "3 months FULL CLUB ACCES" && group.title === "ABONAMENTE ACCESS CLUB" && (
                    <div class={breakSpanClass}></div>
                  )}
                  <div class={`card p-6 border border-gray-200 dark:border-gray-700 slide-up relative`} style={`animation-delay: ${currentPlanIndex * 100}ms`}>
                    <h3 class="text-xl font-semibold mb-6 text-red-500 dark:text-red-500">{plan.name}</h3>
                    <div class={`${group.title === "ABONAMENTE ACCESS CLUB" ? "md:space-y-6" : "space-y-6"}`}>
                      {plan.sections && plan.sections.map((section: Section, sectionIndex: number) => {
                        const modalId = `modal-${plan.name.replace(/\s+/g, '-')}-${sectionIndex}`;
                        return (
                          <>
                            <div class="section-item border-t border-gray-200 dark:border-gray-700 pt-4 first:pt-0 first:border-t-0">
                              <div class="flex items-center justify-between mb-3">
                                <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300">{section.title}</h4>
                                {section.sectionModalDetails && (
                                  <button class="btn btn-ghost btn-circle btn-sm text-red-500" onclick={`document.getElementById('${modalId}').showModal()`}>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
                                    </svg>
                                  </button>
                                )}
                              </div>
                              {section.items && section.items.length > 0 && (
                                // Add data-section-title to the ul element
                                <ul class="list-none pl-0 space-y-1.5 text-base" data-section-title={section.title}>
                                  {section.items.map((item: PricingItem) => (
                                    <li class="text-gray-600 dark:text-gray-400">
                                      <span set:html={marked.parseInline(item.text || '')} />
                                      {item.note && (
                                        <p class="text-sm text-blue-600 dark:text-blue-400 ml-1 mt-0.5 italic" set:html={marked.parseInline(item.note)} />
                                      )}
                                    </li>
                                  ))}
                                </ul>
                              )}
                            </div>

                            {/* DaisyUI Modal */}
                            {section.sectionModalDetails && (
                              <dialog id={modalId} class="modal">
                                <div class="modal-box max-w-md">
                                  <form method="dialog">
                                    <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2 text-base-content">âœ•</button>
                                  </form>
                                  <h3 class="font-bold text-lg text-base-content">{section.sectionModalDetails.title}</h3>
                                  <div class="py-4 prose dark:prose-invert max-w-none text-base-content" set:html={marked.parse(section.sectionModalDetails.content || '')} />
                                </div>
                                 <form method="dialog" class="modal-backdrop">
                                  <button>close</button>
                                </form>
                              </dialog>
                            )}
                          </>
                        );
                      })}
                    </div>
                  </div>
                </>
              );
            })}
          </div>
        </div>
      );
    })}
    
    <div class="mt-12 text-center">
      <p class="text-gray-600 dark:text-gray-300 mb-2">Ai nevoie de un plan special pentru tine?</p>
      <a href="/contact" class="text-primary-600 dark:text-primary-400 font-medium hover:underline">Contacteaza-ne</a>
    </div>
  </div>
</section>

<script is:inline>
document.addEventListener('astro:page-load', () => {
  const accessClubGroupTitle = "ABONAMENTE ACCESS CLUB";
  // Define the specific section titles you want to align for this group
  const sectionTitlesToAlign = ["Suited for:", "Pret Acces Club:", "Rate fara dobanda BT STAR:"];

  const groupGrid = document.querySelector(`.grid[data-group-title="${accessClubGroupTitle}"]`);

  if (!groupGrid) {
    // console.warn(`Pricing section alignment: Group grid for '${accessClubGroupTitle}' not found.`);
    return;
  }

  sectionTitlesToAlign.forEach(title => {
    const elementsToAlign = Array.from(groupGrid.querySelectorAll(`ul[data-section-title="${title}"]`));

    if (elementsToAlign.length > 0) {
      // Reset heights to auto to get natural height for recalculation
      elementsToAlign.forEach(el => el.style.height = 'auto');

      // Defer to next frame to ensure 'auto' has been applied and dimensions are correct
      requestAnimationFrame(() => {
        let maxHeight = 0;
        elementsToAlign.forEach(el => {
          const elHeight = el.getBoundingClientRect().height;
          if (elHeight > maxHeight) {
            maxHeight = elHeight;
          }
        });

        if (maxHeight > 0) { // Apply only if a positive height was found
            elementsToAlign.forEach(el => {
            el.style.height = `${maxHeight}px`;
          });
        }
      });
    }
  });
});
</script>